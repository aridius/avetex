<?xml version="1.0" encoding="utf-8"?>
<modification>
  <code>autocalc_price_option</code>
  <name>Обновление цены при выборе опций OC2 (без AJAX)</name>
  <version>3.0.11</version>
  <author>mpn2005</author>
  
  <file path="admin/view/template/setting/setting.twig">
    <operation error="skip">                           
      <search><![CDATA[
	   <label class="col-sm-2 control-label"><span data-toggle="tooltip" title="{{ help_currency_auto }}">{{ entry_currency_auto }}</span></label>
	  ]]>
	  </search>
      <add position="before"><![CDATA[
          <label class="col-sm-2 control-label" for="input-currency"><span data-toggle="tooltip" title="Выводится модулем autocalc_price_option в карточке товара">Дополнительная валюта <i>(autocalc)</i>:</span></label>
          <div class="col-sm-10">
            <select name="config_currency2" id="input-currency" class="form-control">
              <option value="">{{ text_none }}</option>
              {% for currency in currencies %} 
              {% if (currency['code'] == config_currency2) %} 
              <option value="{{ currency['code'] }}" selected="selected">{{ currency['title'] }}</option>
              {% else %} 
              <option value="{{ currency['code'] }}">{{ currency['title'] }}</option>
              {% endif %} 
              {% endfor %} 
            </select>
          </div>
        </div>
        <div class="form-group">
          <label class="col-sm-2 control-label" for="input-currency"><span data-toggle="tooltip" title="Акция на опции пропорционально акции на товар (autocalc_price_option)">Акция на опции <i>(autocalc)</i>:</span></label>
          <div class="col-sm-10">
            <label class="radio-inline">
              {% if (config_autocalc_option_special) %} 
              <input type="radio" name="config_autocalc_option_special" value="1" checked="checked" />
              {{ text_yes }} 
              {% else %} 
              <input type="radio" name="config_autocalc_option_special" value="1" />
              {{ text_yes }} 
              {% endif %} 
            </label>
            <label class="radio-inline">
              {% if (not config_autocalc_option_special) %} 
              <input type="radio" name="config_autocalc_option_special" value="0" checked="checked" />
              {{ text_no }} 
              {% else %} 
              <input type="radio" name="config_autocalc_option_special" value="0" />
              {{ text_no }} 
              {% endif %} 
            </label>
          </div>
        </div>
        <div class="form-group">
          <label class="col-sm-2 control-label" for="input-currency"><span data-toggle="tooltip" title="Скидка на опции пропорционально скидке на товар (autocalc_price_option)">Скидка на опции <i>(autocalc)</i>:</span></label>
          <div class="col-sm-10">
            <label class="radio-inline">
              {% if (config_autocalc_option_discount) %} 
              <input type="radio" name="config_autocalc_option_discount" value="1" checked="checked" />
              {{ text_yes }} 
              {% else %} 
              <input type="radio" name="config_autocalc_option_discount" value="1" />
              {{ text_yes }} 
              {% endif %} 
            </label>
            <label class="radio-inline">
              {% if (not config_autocalc_option_discount) %} 
              <input type="radio" name="config_autocalc_option_discount" value="0" checked="checked" />
              {{ text_no }} 
              {% else %} 
              <input type="radio" name="config_autocalc_option_discount" value="0" />
              {{ text_no }} 
              {% endif %} 
            </label>
          </div>
        </div>
        <div class="form-group">
          <label class="col-sm-2 control-label" for="input-currency"><span data-toggle="tooltip" title="Отключении функции умножения на количество (autocalc_price_option)">Не умножать на количество <i>(autocalc)</i>:</span></label>
          <div class="col-sm-10">
            <label class="radio-inline">
              {% if (config_autocalc_not_mul_qty) %} 
              <input type="radio" name="config_autocalc_not_mul_qty" value="1" checked="checked" />
              {{ text_yes }} 
              {% else %} 
              <input type="radio" name="config_autocalc_not_mul_qty" value="1" />
              {{ text_yes }} 
              {% endif %} 
            </label>
            <label class="radio-inline">
              {% if (not config_autocalc_not_mul_qty) %} 
              <input type="radio" name="config_autocalc_not_mul_qty" value="0" checked="checked" />
              {{ text_no }} 
              {% else %} 
              <input type="radio" name="config_autocalc_not_mul_qty" value="0" />
              {{ text_no }} 
              {% endif %} 
            </label>
          </div>
        </div>
        <div class="form-group">
          <label class="col-sm-2 control-label" for="input-currency"><span data-toggle="tooltip" title="Автоматический выбор первой опции (radio,select). (autocalc_price_option)">Выбор первой опции <i>(autocalc)</i>:</span></label>
          <div class="col-sm-10">
            <label class="radio-inline">
              {% if (config_autocalc_select_first) %} 
              <input type="radio" name="config_autocalc_select_first" value="1" checked="checked" />
              {{ text_yes }} 
              {% else %} 
              <input type="radio" name="config_autocalc_select_first" value="1" />
              {{ text_yes }} 
              {% endif %} 
            </label>
            <label class="radio-inline">
              {% if (not config_autocalc_select_first) %} 
              <input type="radio" name="config_autocalc_select_first" value="0" checked="checked" />
              {{ text_no }} 
              {% else %} 
              <input type="radio" name="config_autocalc_select_first" value="0" />
              {{ text_no }} 
              {% endif %} 
            </label>
          </div>
        </div>
        <div class="form-group">
      ]]></add>
    </operation>        
  </file>  
  <file path="admin/controller/setting/setting.php">
    <operation>                           
      <search><![CDATA[if (isset($this->request->post['config_currency'])) {]]></search>
      <add position="before"><![CDATA[
        if (isset($this->request->post['config_currency2'])) {
            $data['config_currency2'] = $this->request->post['config_currency2'];
        } else {
            $data['config_currency2'] = $this->config->get('config_currency2');
        }
        if (isset($this->request->post['config_autocalc_option_special'])) {
            $data['config_autocalc_option_special'] = $this->request->post['config_autocalc_option_special'];
        } else {
            $data['config_autocalc_option_special'] = $this->config->get('config_autocalc_option_special');
        }        
        if (isset($this->request->post['config_autocalc_option_discount'])) {
            $data['config_autocalc_option_discount'] = $this->request->post['config_autocalc_option_discount'];
        } else {
            $data['config_autocalc_option_discount'] = $this->config->get('config_autocalc_option_discount');
        }
        if (isset($this->request->post['config_autocalc_not_mul_qty'])) {
            $data['config_autocalc_not_mul_qty'] = $this->request->post['config_autocalc_not_mul_qty'];
        } else {
            $data['config_autocalc_not_mul_qty'] = $this->config->get('config_autocalc_not_mul_qty');
        }
        if (isset($this->request->post['config_autocalc_select_first'])) {
            $data['config_autocalc_select_first'] = $this->request->post['config_autocalc_select_first'];
        } else {
            $data['config_autocalc_select_first'] = $this->config->get('config_autocalc_select_first');
        }
      ]]></add>
    </operation>        
  </file>
  
  
  <file path="catalog/controller/product/category.php">
    <operation>                           
      <search><![CDATA[$price = $this->currency->format(]]></search>
      <add position="after"><![CDATA[
        if ($this->currency->has($this->config->get('config_currency2')) && ($this->config->get('config_currency2') != $this->session->data['currency'])) {
            $price .= ' (' . $this->currency->format($this->tax->calculate($result['price'], $result['tax_class_id'], $this->config->get('config_tax')), $this->config->get('config_currency2')) . ')';
        }
      ]]></add>
    </operation>    
    <operation>                           
      <search><![CDATA[$special = $this->currency->format(]]></search>
      <add position="after"><![CDATA[
        if ($this->currency->has($this->config->get('config_currency2')) && ($this->config->get('config_currency2') != $this->session->data['currency'])) {
            $special .= ' (' . $this->currency->format($this->tax->calculate($result['special'], $result['tax_class_id'], $this->config->get('config_tax')), $this->config->get('config_currency2')) . ')';
        }
      ]]></add>
    </operation>
  </file>


   <file path="catalog/view/theme/*/template/product/{product,aridius_quickview}.twig"> 
    <operation error="skip">
      <search><![CDATA[({{ option_value['price_prefix'] }}{{ option_value['price'] }})]]></search>
      <add position="replace"><![CDATA[
	{{ (option_value['price_prefix'] == '+' or option_value['price_prefix'] == '-' ? option_value['price_prefix'] : '') }}{{ option_value['price'] }}
	  ]]></add>
    </operation>
  </file>
  
  <file path="catalog/view/theme/*/template/product/{product,aridius_quickview}.twig"> 
    <operation>
      <search><![CDATA[value="{{ option_value['product_option_value_id'] }}"]]></search>
      <add position="replace"><![CDATA[
	  value="{{ option_value['product_option_value_id'] }}" data-points="{{ option_value['points_value'] is defined ? option_value['points_value'] : 0 }}" data-prefix="{{ option_value['price_prefix'] }}" data-price="{{ option_value['price_value'] }}"
	  ]]></add>
    </operation>
    <operation>
       <search><![CDATA[
	  <!-- rating -->
	  ]]></search>
      <add position="before"><![CDATA[
<script><!--
function price_format(price)
{ 
     c = {{ autocalc_currency['decimals'] is empty ? "0" : autocalc_currency['decimals'] }};
    d = '{{ autocalc_currency['decimal_point'] }}'; // decimal separator
    t = '{{ autocalc_currency['thousand_point'] }}'; // thousands separator
    s_left = '{{ autocalc_currency['symbol_left'] }}';
    s_right = '{{ autocalc_currency['symbol_right'] }}';
    n = price * {{ autocalc_currency['value'] }};
    i = parseInt(n = Math.abs(n).toFixed(c)) + ''; 
    j = ((j = i.length) > 3) ? j % 3 : 0; 
    price_text = s_left + (j ? i.substr(0, j) + t : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : '') + s_right; 
    
    {% if (autocalc_currency2 is not empty) %} 
    c = {{ autocalc_currency2['decimals'] is empty ? "0" : autocalc_currency2['decimals'] }};
    d = '{{ autocalc_currency2['decimal_point'] }}'; // decimal separator
    t = '{{ autocalc_currency2['thousand_point'] }}'; // thousands separator
    s_left = '{{ autocalc_currency2['symbol_left'] }}';
    s_right = '{{ autocalc_currency2['symbol_right'] }}';
    n = price * {{ autocalc_currency2['value'] }};
    i = parseInt(n = Math.abs(n).toFixed(c)) + ''; 
    j = ((j = i.length) > 3) ? j % 3 : 0; 
    price_text += '(' + s_left + (j ? i.substr(0, j) + t : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : '') + s_right + ')'; 
    {% endif %} 
    
    return price_text;
}

function calculate_tax(price)
{
    {# Process Tax Rates #}
 {% if (tax_rates is defined and tax) %}
 {% for tax_rate in tax_rates %} 
 {% if (tax_rate['type'] == 'F') %}
 {{ 'price += '~tax_rate['rate']~';' }}
 {% elseif (tax_rate['type'] == 'P') %}
 {{ 'price += (price * '~tax_rate['rate']~') / 100.0;' }}
 {% endif %}
 {% endfor %}
 {% endif %}
 
    return price;
}

function process_discounts(price, quantity)
{
     {% for discount in dicounts_unf %} 
 {{ 'if ((quantity >= '~discount['quantity']~') && ('~discount['price']~' < price)) price = '~discount['price']~';'~"\n" }}
 {% endfor %}
 
    return price;
}


animate_delay = 20;

main_price_final = calculate_tax({{ price_value }});
main_price_start = calculate_tax({{ price_value }});
main_step = 0;
main_timeout_id = 0;

function animateMainPrice_callback() {
    main_price_start += main_step;
    
    if ((main_step > 0) && (main_price_start > main_price_final)){
        main_price_start = main_price_final;
    } else if ((main_step < 0) && (main_price_start < main_price_final)) {
        main_price_start = main_price_final;
    } else if (main_step == 0) {
        main_price_start = main_price_final;
    }
    
    $('.autocalc-product-price').html( price_format(main_price_start) );
    
    if (main_price_start != main_price_final) {
        main_timeout_id = setTimeout(animateMainPrice_callback, animate_delay);
    }
}

function animateMainPrice(price) {
    main_price_start = main_price_final;
    main_price_final = price;
    main_step = (main_price_final - main_price_start) / 10;
    
    clearTimeout(main_timeout_id);
    main_timeout_id = setTimeout(animateMainPrice_callback, animate_delay);
}


{% if (special) %} 


saving_price_final = calculate_tax({{ saving_value }});
saving_price_start = calculate_tax({{ saving_value }});
saving_step = 0;
main_timeout_id2 = 0;
function animateSavingPrice_callback() {
    saving_price_start += saving_step;
    if ((saving_step > 0) && (saving_price_start > saving_price_final)){
        saving_price_start = saving_price_final;
    } else if ((saving_step < 0) && (saving_price_start < saving_price_final)) {
        saving_price_start = saving_price_final;
    } else if (saving_step == 0) {
        saving_price_start = saving_price_final;
    }
    $('.autocalc-saving-price').html( price_format(saving_price_start) );
    if (saving_price_start != saving_price_final) {
        main_timeout_id2 = setTimeout(animateSavingPrice_callback, animate_delay);
    }
}
function animateMainPrice2(price) {
    saving_price_start = saving_price_final;
    saving_price_final = price;
    saving_step = (saving_price_final - saving_price_start) / 10;
    clearTimeout(main_timeout_id2);
    main_timeout_id2 = setTimeout(animateSavingPrice_callback, animate_delay);
}

special_price_final = calculate_tax({{ special_value }});
special_price_start = calculate_tax({{ special_value }});
special_step = 0;
special_timeout_id = 0;

function animateSpecialPrice_callback() {
    special_price_start += special_step;
    
    if ((special_step > 0) && (special_price_start > special_price_final)){
        special_price_start = special_price_final;
    } else if ((special_step < 0) && (special_price_start < special_price_final)) {
        special_price_start = special_price_final;
    } else if (special_step == 0) {
        special_price_start = special_price_final;
    }
    
    $('.autocalc-product-special').html( price_format(special_price_start) );
    
    if (special_price_start != special_price_final) {
        special_timeout_id = setTimeout(animateSpecialPrice_callback, animate_delay);
    }
}

function animateSpecialPrice(price) {
    special_price_start = special_price_final;
    special_price_final = price;
    special_step = (special_price_final - special_price_start) / 10;
    
    clearTimeout(special_timeout_id);
    special_timeout_id = setTimeout(animateSpecialPrice_callback, animate_delay);
}
{% endif %} 


function recalculateprice()
{
    var main_price = {{ price_value }};
	var saving_price = {{ saving_value }};
    var input_quantity = Number($('input[name="quantity"]').val());
    var special = {{ special_value }};
    var tax = 0;
    discount_coefficient = 1;
    
    if (isNaN(input_quantity)) input_quantity = 0;
    
    {% if (special) %} 
        special_coefficient = {{ price_value/special_value }};
    {% else %} 
        {% if (autocalc_option_discount is empty) %} 
            main_price = process_discounts(main_price, input_quantity);
            tax = process_discounts(tax, input_quantity);
        {% else %} 
            if (main_price) discount_coefficient = process_discounts(main_price, input_quantity) / main_price;
        {% endif %} 
    {% endif %} 
    
    
    var option_price = 0;
    
    {% if (points) %} 
      var points = {{ points_value }};
      $('input:checked,option:selected').each(function() {
          if ($(this).data('points')) points += Number($(this).data('points'));
      });
      $('.autocalc-product-points').html(points);
    {% endif %} 
    
    $('input:checked,option:selected').each(function() {
      if ($(this).data('prefix') == '=') {
        option_price += Number($(this).data('price'));
        main_price = 0;
        special = 0;
      }
    });
    
    $('input:checked,option:selected').each(function() {
      if ($(this).data('prefix') == '+') {
        option_price += Number($(this).data('price'));
      }
      if ($(this).data('prefix') == '-') {
        option_price -= Number($(this).data('price'));
      }
      if ($(this).data('prefix') == 'u') {
        pcnt = 1.0 + (Number($(this).data('price')) / 100.0);
        option_price *= pcnt;
        main_price *= pcnt;
        special *= pcnt;
      }
      if ($(this).data('prefix') == 'd') {
        pcnt = 1.0 - (Number($(this).data('price')) / 100.0);
        option_price *= pcnt;
        main_price *= pcnt;
        special *= pcnt;
      }
      if ($(this).data('prefix') == '*') {
        option_price *= Number($(this).data('price'));
        main_price *= Number($(this).data('price'));
        special *= Number($(this).data('price'));
      }
      if ($(this).data('prefix') == '/') {
        option_price /= Number($(this).data('price'));
        main_price /= Number($(this).data('price'));
        special /= Number($(this).data('price'));
      }
    });
    
    special += option_price;
    main_price += option_price;

    {% if (special) %} 
    {% if (autocalc_option_special ==0) %} 
        main_price = special * special_coefficient;
		 saving_price = main_price - special;
      {% else %} 
        special = main_price / special_coefficient;
		saving_price = main_price - special;
      {% endif %} 
      tax = special;
    {% else %} 
      {% if (autocalc_option_discount is not empty) %} 
          main_price *= discount_coefficient;
      {% endif %} 
      tax = main_price;
    {% endif %} 
    
    // Process TAX.
    main_price = calculate_tax(main_price);
	  saving_price = calculate_tax(saving_price);
    special = calculate_tax(special);
    
    {% if (not autocalc_not_mul_qty) %} 
    if (input_quantity > 0) {
      main_price *= input_quantity;
      special *= input_quantity;
	   saving_price *= input_quantity;
      tax *= input_quantity;
    }
    {% endif %} 

    // Display Main Price
    animateMainPrice(main_price);
      
    {% if (special) %} 
	animateMainPrice2(saving_price);
      animateSpecialPrice(special);
    {% endif %} 
}

$(document).ready(function() {
    $('input[type="checkbox"]').bind('change', function() { recalculateprice(); });
    $('input[type="radio"]').bind('change', function() { recalculateprice(); });
    $('select').bind('change', function() { recalculateprice(); });
    $quantity = $('input[name="quantity"]');
    $quantity.data('val', $quantity.val());
	{% if (config_stock) %} 
		var maximum = 7777;
	{% else %} 
		var maximum = {{ quantity }};
    {% endif %} 
    (function() {
    if ($quantity.val() != $quantity.data('val')){
          $quantity.data('val',$quantity.val());
          quantity_danger();		
          if ($quantity.val() <= maximum) {
		  recalculateprice();
		} else {
				$('.prqv, .prqv2').val(maximum);
		}			
        }
        setTimeout(arguments.callee, 250);
    })();
	function quantity_danger() {
	  if ($quantity.val() >= maximum) {
	  $('#pr_alert_danger, #pr_alert_danger2').html('<div class="alert alert-danger"><i class="fa fa-exclamation-circle"></i> {{ text_maximum }} {{ quantity }} </div>'); 
	   } else {
	  $('#pr_alert_danger, #pr_alert_danger2').html(''); 
     }      	
}
    {% if (autocalc_select_first) %} 
    $('select[name^="option"] option[value=""]').remove();
    last_name = '';
    $('input[type="radio"][name^="option"]').each(function(){
        if ($(this).attr('name') != last_name) $(this).prop('checked', true);
        last_name = $(this).attr('name');
    });
	    $('input[type="checkbox"][name^="option"]').each(function(){
        if ($(this).attr('name') != last_name) $(this).prop('checked', true);
        last_name = $(this).attr('name');
    });
    {% endif %} 
    recalculateprice();
});

//--></script>
      ]]></add>
    </operation>
  </file>

  <file path="catalog/model/catalog/product.php">
    <operation>
      <search><![CDATA['weight'                  => $product_option_value['weight'],]]></search>
      <add position="before"><![CDATA[
          'points'        => $product_option_value['points'],
          'points_prefix' => $product_option_value['points_prefix'],
      ]]></add>
    </operation>
  </file>
  
  <file path="catalog/controller/product/product.php">
    <operation>
      <search><![CDATA[$data['options'] = array();]]></search>
      <add position="before"><![CDATA[
          $data['raw_price'] = $data['price'];
          $data['raw_special'] = $data['special'];
        
          if ($data['price']) {
              $data['price'] = '<span class=\'autocalc-product-price\'>' . $data['price'] . '</span>';
          }
          if ($data['special']) {
              $data['special'] = '<span class=\'autocalc-product-special\'>' . $data['special'] . '</span>';
          }
          if ($data['points']) {
              $data['points'] = '<span class=\'autocalc-product-points\'>' . $data['points'] . '</span>';
          }
          
          $data['price_value'] = (float)$product_info['price'];
          $data['special_value'] = (float)$product_info['special'];
          $data['tax_value'] = (float)$product_info['special'] ? $product_info['special'] : $product_info['price'];
          $data['points_value'] = (float)$product_info['points'];
     
         
		  if ((float)$product_info['special']) {
				 $data['saving_value'] = $product_info['price'] - $product_info['special'];
			} else {
				$data['saving_value'] = 0;
			}
		  
          $var_currency = array();
          $currency_code = !empty($this->session->data['currency']) ? $this->session->data['currency'] : $this->config->get('config_currency');
          $var_currency['value'] = $this->currency->getValue($currency_code);
          $var_currency['symbol_left'] = $this->currency->getSymbolLeft($currency_code);
          $var_currency['symbol_right'] = $this->currency->getSymbolRight($currency_code);
          $var_currency['decimals'] = $this->currency->getDecimalPlace($currency_code);
          $var_currency['decimal_point'] = $this->language->get('decimal_point');
          $var_currency['thousand_point'] = $this->language->get('thousand_point');
          $data['autocalc_currency'] = $var_currency;

          $currency2_code = $this->config->get('config_currency2');
          if ($this->currency->has($currency2_code) && $currency2_code != $currency_code) {
              $var_currency = array();
              $currency_code = $currency2_code;
              $var_currency['value'] = $this->currency->getValue($currency_code);
              $var_currency['symbol_left'] = $this->currency->getSymbolLeft($currency_code);
              $var_currency['symbol_right'] = $this->currency->getSymbolRight($currency_code);
              $var_currency['decimals'] = $this->currency->getDecimalPlace($currency_code);
              $var_currency['decimal_point'] = $this->language->get('decimal_point');
              $var_currency['thousand_point'] = $this->language->get('thousand_point');
              $data['autocalc_currency2'] = $var_currency;
          }
          
          $data['dicounts_unf'] = $discounts;

          $data['tax_class_id'] = $product_info['tax_class_id'];
          $data['tax_rates'] = $this->tax->getRates(0, $product_info['tax_class_id']);
        
          $data['autocalc_option_special'] = $this->config->get('config_autocalc_option_special');
          $data['autocalc_option_discount'] = $this->config->get('config_autocalc_option_discount');
          $data['autocalc_not_mul_qty'] = $this->config->get('config_autocalc_not_mul_qty');
          $data['autocalc_select_first'] = $this->config->get('config_autocalc_select_first');
      ]]></add>
    </operation>
    <operation>
      <search><![CDATA[$product_option_value_data[] = array(]]></search>
      <add position="after"><![CDATA[
          'price_value'                   => $option_value['price'],
          'points_value'                  => intval($option_value['points_prefix'].$option_value['points']),
      ]]></add>
    </operation>
  </file>
  <file path="system/library/cart/cart.php">    
    <operation>
      <search><![CDATA[if ($product_discount_query->num_rows) {]]></search>
      <add position="after"><![CDATA[
        if ((float)$product_discount_query->row['price'] && (float)$product_query->row['price'] && $this->config->get('config_autocalc_option_discount')) {
          $discount_coefficient = (float)$product_discount_query->row['price'] / (float)$product_query->row['price'];
          if (isset($option_price_arr) && is_array($option_price_arr)) {
            foreach($option_price_arr as $key1=>$operations){
              foreach($operations as $operation=>$value){
                if (($operation == '+' || $operation == '-' || $operation == '=')) {
                  $option_price_arr[$key1][$operation] = $value * $discount_coefficient;
                }
              }
            }
          } else if (is_array($option_price)) {
            foreach($option_price as $key1=>$operations){
              foreach($operations as $operation=>$value){
                if (($operation == '+' || $operation == '-' || $operation == '=')) {
                  $option_price[$key1][$operation] = $value * $discount_coefficient;
                }
              }
            }
          } else {
            $option_price *= $discount_coefficient;
          }
        }
      ]]></add>
    </operation>
    <operation>
      <search><![CDATA[if ($product_special_query->num_rows) {]]></search>
      <add position="after"><![CDATA[
        if ($product_special_query->row['price'] > 0.0 && $this->config->get('config_autocalc_option_special')) {
          $special_koefficient = (float)$product_query->row['price'] / (float)$product_special_query->row['price'];
          if (isset($option_price_arr) && is_array($option_price_arr)) {
            foreach($option_price_arr as $key1=>$operations){
              foreach($operations as $operation=>$value){
                if (($operation == '+' || $operation == '-' || $operation == '=') && (float)$special_koefficient ) {
                  $option_price_arr[$key1][$operation] = $value / $special_koefficient;
                }
              }
            }
          } else if (is_array($option_price)) {
            foreach($option_price as $key1=>$operations){
              foreach($operations as $operation=>$value){
                if (($operation == '+' || $operation == '-' || $operation == '=') && (float)$special_koefficient ) {
                  $option_price[$key1][$operation] = $value / $special_koefficient;
                }
              }
            }
          } else if ((float)$special_koefficient) {
            $option_price /= $special_koefficient;
          }
        }
      ]]></add>
    </operation>
  </file>

</modification>